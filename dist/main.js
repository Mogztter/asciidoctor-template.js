/* Generated by Opal 0.11.0.dev */
Opal.modules["asciidoctor/core_ext/factory"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$resolve', '$is_a?', '$new', '$===', '$require', '$to_s', '$==', '$exist?', '$key?', '$[]=', '$-', '$[]']);
  return (function($base, $visibility_scopes) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope);

    (function($base, $visibility_scopes) {
      var $Converter, self = $Converter = $module($base, 'Converter');

      var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope);

      (function($base, $super, $visibility_scopes) {
        function $Factory(){};
        var self = $Factory = $klass($base, $super, 'Factory', $Factory);

        var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_Factory_create_1;

        return (Opal.defn(self, '$create', TMP_Factory_create_1 = function $$create(backend, opts) {
          var $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o, $p, $q, $r, $s, self = this, converter = nil, base_converter = nil, $case = nil, revealjs_templates_path = nil, $writer = nil, template_converter = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          
          if ((($a = (converter = self.$resolve(backend))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = converter['$is_a?'](Opal.const_get([Opal.Object.$$scope], 'Class', true, true))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return converter.$new(backend, opts)
              } else {
              return converter
            }};
          base_converter = (function() {$case = backend;
if ("html5"['$===']($case)) {
          if ((($a = (($d = Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, false)) && $d.$$scope && ($c = Opal.const_get([$d.$$scope], 'Converter', true, false)) && $c.$$scope && ($b = Opal.const_get([$c.$$scope], 'Html5Converter', true, false)) ? 'constant' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/html5".$to_s())
          };
          return Opal.const_get($scopes, 'Html5Converter', true, true).$new(backend, opts);}else if ("docbook5"['$===']($case)) {
          if ((($a = (($g = Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, false)) && $g.$$scope && ($f = Opal.const_get([$g.$$scope], 'Converter', true, false)) && $f.$$scope && ($e = Opal.const_get([$f.$$scope], 'DocBook5Converter', true, false)) ? 'constant' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/docbook5".$to_s())
          };
          return Opal.const_get($scopes, 'DocBook5Converter', true, true).$new(backend, opts);}else if ("docbook45"['$===']($case)) {
          if ((($a = (($j = Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, false)) && $j.$$scope && ($i = Opal.const_get([$j.$$scope], 'Converter', true, false)) && $i.$$scope && ($h = Opal.const_get([$i.$$scope], 'DocBook45Converter', true, false)) ? 'constant' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/docbook45".$to_s())
          };
          return Opal.const_get($scopes, 'DocBook45Converter', true, true).$new(backend, opts);}else if ("manpage"['$===']($case)) {
          if ((($a = (($m = Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, false)) && $m.$$scope && ($l = Opal.const_get([$m.$$scope], 'Converter', true, false)) && $l.$$scope && ($k = Opal.const_get([$l.$$scope], 'ManPageConverter', true, false)) ? 'constant' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/manpage".$to_s())
          };
          return Opal.const_get($scopes, 'ManPageConverter', true, true).$new(backend, opts);}else { return nil }})();
          if ((($a = (($n = backend['$==']("revealjs")) ? ((($o = Opal.const_get($scopes, 'JAVASCRIPT_PLATFORM', true, true)['$==']("node")) !== false && $o !== nil && $o != null) ? $o : Opal.const_get($scopes, 'JAVASCRIPT_PLATFORM', true, true)['$==']("node-electron")) : backend['$==']("revealjs"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = Opal.const_get([Opal.Object.$$scope], 'File', true, true)['$exist?']((revealjs_templates_path = "node_modules/asciidoctor-reveal.js/templates"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              if ((($a = opts['$key?']("template_dirs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                } else {
                
                $writer = ["template_dirs", revealjs_templates_path];
                $send(opts, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }}};
          if ((($a = opts['$key?']("template_dirs")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return base_converter
          };
          if ((($a = (($p = Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, false)) && $p.$$scope && ($o = Opal.const_get([$p.$$scope], 'Converter', true, false)) && $o.$$scope && ($n = Opal.const_get([$o.$$scope], 'TemplateConverter', true, false)) ? 'constant' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/template".$to_s())
          };
          if ((($a = (($s = Opal.const_get([Opal.Object.$$scope], 'Asciidoctor', true, false)) && $s.$$scope && ($r = Opal.const_get([$s.$$scope], 'Converter', true, false)) && $r.$$scope && ($q = Opal.const_get([$r.$$scope], 'CompositeConverter', true, false)) ? 'constant' : nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$require("asciidoctor/converter/composite".$to_s())
          };
          template_converter = Opal.const_get($scopes, 'TemplateConverter', true, true).$new(backend, opts['$[]']("template_dirs"), opts);
          return Opal.const_get($scopes, 'CompositeConverter', true, true).$new(backend, template_converter, base_converter);
        }, TMP_Factory_create_1.$$arity = -2), nil) && 'create'
      })($scope.base, null, $scopes)
    })($scope.base, $scopes)
  })($scope.base, $scopes)
};

/* Generated by Opal 0.11.0.dev */
Opal.modules["asciidoctor/core_ext/template"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$kind_of?', '$resolve_template', '$!', '$nil?', '$new', '$each', '$join', '$+', '$try_read', '$read', '$node_name', '$raise']);
  return (function($base, $visibility_scopes) {
    var $Asciidoctor, self = $Asciidoctor = $module($base, 'Asciidoctor');

    var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope);

    (function($base, $super, $visibility_scopes) {
      function $TemplateConverter(){};
      var self = $TemplateConverter = $klass($base, $super, 'TemplateConverter', $TemplateConverter);

      var def = self.$$proto, $scope = self.$$scope, $scopes = $visibility_scopes.slice().concat($scope), TMP_TemplateConverter_initialize_1, TMP_TemplateConverter_handles$q_2, TMP_TemplateConverter_resolve_template_4, TMP_TemplateConverter_try_read_5, TMP_TemplateConverter_convert_6;

      def.backend = def.engine = def.template_dirs = nil;
      
      Opal.defn(self, '$initialize', TMP_TemplateConverter_initialize_1 = function $$initialize(backend, template_dirs, opts) {
        var $a, self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        
        self.backend = backend;
        self.engine = "jade";
        if ((($a = template_dirs['$kind_of?'](Opal.const_get($scopes, 'String', true, true))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (self.template_dirs = [template_dirs])
          } else {
          return (self.template_dirs = template_dirs)
        };
      }, TMP_TemplateConverter_initialize_1.$$arity = -3);
      Opal.defn(self, '$handles?', TMP_TemplateConverter_handles$q_2 = function(name) {
        var $a, $b, self = this, template = nil, content = nil;

        
        $b = self.$resolve_template(name), $a = Opal.to_ary($b), (template = ($a[0] == null ? nil : $a[0])), (content = ($a[1] == null ? nil : $a[1])), $b;
        return template['$nil?']()['$!']();
      }, TMP_TemplateConverter_handles$q_2.$$arity = 1);
      Opal.defn(self, '$resolve_template', TMP_TemplateConverter_resolve_template_4 = function $$resolve_template(name) {try {

        var TMP_3, self = this, path_resolver = nil, backend = nil, engine = nil;

        
        path_resolver = Opal.const_get($scopes, 'PathResolver', true, true).$new();
        backend = self.backend;
        engine = self.engine;
        $send(self.template_dirs, 'each', [], (TMP_3 = function(template_dir){var self = TMP_3.$$s || this, $a, engine_dir = nil, template = nil, content = nil;
if (template_dir == null) template_dir = nil;
        
          if (engine !== false && engine !== nil && engine != null) {
            
            engine_dir = Opal.const_get([Opal.Object.$$scope], 'File', true, true).$join(template_dir, engine);
            template = Opal.const_get([Opal.Object.$$scope], 'File', true, true).$join(engine_dir, $rb_plus($rb_plus(name, "."), engine));
            if ((($a = (content = self.$try_read(template))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              Opal.ret([template, content])};};
          template = Opal.const_get([Opal.Object.$$scope], 'File', true, true).$join(template_dir, $rb_plus($rb_plus(name, "."), engine));
          if ((($a = (content = self.$try_read(template))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            Opal.ret([template, content])
            } else {
            return nil
          };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        return [nil, nil];
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_TemplateConverter_resolve_template_4.$$arity = 1);
      Opal.defn(self, '$try_read', TMP_TemplateConverter_try_read_5 = function $$try_read(name) {
        var self = this;

        try {
          return Opal.const_get([Opal.Object.$$scope], 'File', true, true).$read(name)
        } catch ($err) {
          if (Opal.rescue($err, [Opal.const_get($scopes, 'IOError', true, true)])) {
            try {
              return nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_TemplateConverter_try_read_5.$$arity = 1);
      return (Opal.defn(self, '$convert', TMP_TemplateConverter_convert_6 = function $$convert(node, template_name, opts) {
        var $a, $b, self = this, template = nil, content = nil;

        if (template_name == null) {
          template_name = nil;
        }
        if (opts == null) {
          opts = $hash2([], {});
        }
        
        ((($a = template_name) !== false && $a !== nil && $a != null) ? $a : (template_name = node.$node_name()));
        $b = self.$resolve_template(template_name), $a = Opal.to_ary($b), (template = ($a[0] == null ? nil : $a[0])), (content = ($a[1] == null ? nil : $a[1])), $b;
        if (content !== false && content !== nil && content != null) {
          } else {
          self.$raise("" + "Could not find a custom template to handle transform: " + (template_name))
        };
        
        if (typeof window !== 'undefined') {
          var jade = jade || window.jade;
        } else if (typeof require !== 'undefined') {
          var jade = jade || require('jade');
        } 
        var compiled = jade.compile(content, {pretty: true, filename: template});
        return compiled({ node: node });
      ;
      }, TMP_TemplateConverter_convert_6.$$arity = -2), nil) && 'convert';
    })(Opal.const_get($scopes, 'Converter', true, true), Opal.const_get([Opal.const_get($scopes, 'Converter', true, true).$$scope], 'Base', true, true), $scopes)
  })($scope.base, $scopes)
};

/* Generated by Opal 0.11.0.dev */
(function(Opal) {
  var self = Opal.top, $scope = Opal, $scopes = [Opal], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("asciidoctor/core_ext/factory");
  return self.$require("asciidoctor/core_ext/template");
})(Opal);
